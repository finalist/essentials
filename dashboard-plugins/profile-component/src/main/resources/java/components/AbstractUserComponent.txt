package {{componentsPackage}};

import {{componentsPackage}}info.BaseWidgetInfo;
import {{componentsPackage}}.security.model.UserProfile;

import org.apache.commons.lang.StringUtils;
import org.hippoecm.hst.content.beans.ObjectBeanManagerException;
import org.hippoecm.hst.content.beans.standard.HippoGalleryImageSet;
import org.hippoecm.hst.core.component.HstComponentException;
import org.hippoecm.hst.core.component.HstRequest;
import org.hippoecm.hst.core.component.HstResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class AbstractUserComponent<T extends BaseWidgetInfo> extends ProfileBaseComponent {

    private static final Logger LOG = LoggerFactory.getLogger(AbstractUserComponent.class);
    
    @Override
    public void doBeforeRender(HstRequest request, HstResponse response) throws HstComponentException {
        super.doBeforeRender(request, response);

        T info = getInfo(request);
        request.setAttribute("info", info);
        request.setAttribute("image", getImage(request));
        request.setAttribute("visible", isVisible(request));
    }

    protected T getInfo(HstRequest request) {
        return this.<T>getComponentParametersInfo(request);
    }

    @Override
    public void doAction(HstRequest request, HstResponse response) throws HstComponentException {
        super.doAction(request, response);
        LOG.debug("Changing Visibility of " + getComponentConfiguration().getCanonicalIdentifier());

        setVisible(request, false);
    }

    protected boolean isVisible(HstRequest request) {
        if (request.getRequestContext().isCmsRequest()) {
            LOG.debug("Renderrequest is a CMS request, configuring component to be visible");

            // Request is a CMS request; in the CMS no profile is available, so component should always be visible
            return true;
        } else {
            if ( (isStudent(request) && getInfo(request).getVisibleForStudents()) || 
                 (isTeacher(request) && getInfo(request).getVisibleForEmployees())
            ) {
                if (getInfo(request).getNotClosable()) {
                    LOG.debug("Component is not closable, configuring component to be visible");
        
                    // Component can't be closed by users, component should be visible
                    return true;
                } else {
                    UserProfile userProfile = getUserProfile(request);
                    return !userProfile.getDisabledComponents().contains(getComponentStateId());
                }
            }
            return false;
        }
    }

    protected void setVisible(HstRequest request, boolean visible) {
        if (request.getRequestContext().isCmsRequest()) {
            LOG.debug("Actionrequest is a CMS request, not storing visibility configuration in the user profile");
        } else {
            LOG.debug("Storing visibility configuration in the user profile");
            UserProfile userProfile = getUserProfile(request);

            // Update component state in the profile and store the profile
            String componentStateId = getComponentStateId();
            if (visible) {
                 userProfile.getDisabledComponents().remove(componentStateId);
            } else {
                userProfile.getDisabledComponents().add(componentStateId);
            }
            
            setUserProfile(request, userProfile);
        }
    }

    /**
     * @return the name of the component
     */
    protected final String getComponentStateId() {
        String canonicalPath = getComponentConfiguration().getCanonicalPath();
        String[] split = canonicalPath.split("/");
        return split[split.length - 1];
    }

    protected HippoGalleryImageSet getImage(HstRequest request) {
        T info = getInfo(request);
        if (StringUtils.isEmpty(info.getImagePath())) {
            return null;
        }
        try {
            return (HippoGalleryImageSet) getObjectBeanManager(request).getObject(info.getImagePath());
        } catch (ObjectBeanManagerException e) {
            return null;
        }
    }

}
