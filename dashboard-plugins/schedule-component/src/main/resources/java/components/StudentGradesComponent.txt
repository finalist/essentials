package {{componentsPackage}};

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import {{componentsPackage}}info.ListWidgetInfo;

import org.hippoecm.hst.component.support.bean.BaseHstComponent;
import org.hippoecm.hst.core.component.HstComponentException;
import org.hippoecm.hst.core.component.HstRequest;
import org.hippoecm.hst.core.component.HstResponse;
import org.hippoecm.hst.core.parameters.ParametersInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletRequest;

@ParametersInfo(type = ListWidgetInfo.class)
public class StudentGradesComponent extends BaseHstComponent {
    private static final Logger LOG = LoggerFactory.getLogger(StudentGradesComponent.class);

    @Override
    public void doBeforeRender(HstRequest request, HstResponse response) throws HstComponentException {
        super.doBeforeRender(request, response);

        if (isVisible(request)) {
            try {
                ListWidgetInfo info = getComponentParametersInfo(request);
                MockUserDetails userDetails = new MockUserDetails();
                String uid = userDetails.getUid();
                MockGradeService gradeService = new MockGradeService();
                // FIXME: The ESB should support  getting the grades with a limit parameter and sorted.
                MockGrades grades = gradeService.getStudentGrades(uid);
                List<MockGrade> studentGrades = grades == null ? Collections.<MockGrade>emptyList() : grades.getGrades();
                request.setAttribute("grades", sortAndLimitGrades(studentGrades, info.getLimit()));
                request.setAttribute("visible", isVisible(request));
                setHttpRequestParameter(request, "locale", request.getLocale());
            } catch (Exception e) {
                LOG.warn("Error before rendering component: " + e.getMessage());
                request.setAttribute("error", true);
            }
        }
    }

    private List<MockGrade> sortAndLimitGrades(List<MockGrade> studentGrades, int limit) {
        Collections.sort(studentGrades, new Comparator<MockGrade>() {
            @Override
            public int compare(MockGrade o1, MockGrade o2) {
                // show newest first
                return o2.getMutationDate().compareTo(o1.getMutationDate());
            }
        });
        // apply limit
        return studentGrades.subList(0, Math.min(studentGrades.size(), limit));
    }

    protected boolean isVisible(HstRequest request) {
        return true;
    }

    public void setHttpRequestParameter(HstRequest request, String name, Object value) {
        HttpServletRequest servletRequest = request.getRequestContext().getServletRequest();
        if (servletRequest != null) {
            servletRequest.setAttribute(name, value);
        }
    }
}
