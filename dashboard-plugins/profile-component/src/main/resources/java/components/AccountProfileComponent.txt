package {{componentsPackage}};

import java.util.*;
import java.util.Map.Entry;

import {{componentsPackage}}.model.UserInfo;
import {{componentsPackage}}info.ProfileComponentInfo;
import {{componentsPackage}}.domain.ItemState;
import {{componentsPackage}}.security.model.UserProfile;
import {{componentsPackage}}.security.util.SecurityUtil;

import org.hippoecm.hst.component.support.forms.FormField;
import org.hippoecm.hst.component.support.forms.FormMap;
import org.hippoecm.hst.configuration.components.HstComponentConfiguration;
import org.hippoecm.hst.core.component.HstComponentException;
import org.hippoecm.hst.core.component.HstRequest;
import org.hippoecm.hst.core.component.HstResponse;
import org.hippoecm.hst.core.parameters.ParametersInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ParametersInfo(type = ProfileComponentInfo.class)
public class AccountProfileComponent extends UserDetailComponent {
    private static final Logger LOG = LoggerFactory.getLogger(AccountProfileComponent.class);

    @Override
    public void doBeforeRender(HstRequest request, HstResponse response) throws HstComponentException {
        super.doBeforeRender(request, response);

        if (hasUserDetails(request)) {
            UserInfo userInfo = getUserInfo(request);
            putUserDetailsOnRequest(request, userInfo);
            ProfileComponentInfo info = getComponentParametersInfo(request);
            request.setAttribute("profileEditUrl", info.getProfileEditUrl());

            UserProfile userProfile = getUserProfile(request);
            request.setAttribute("areaOfInterestStates", getAreaOfInterestStates(getAreasOfInterest(request), userProfile.getDisabledAreasOfInterest()));
            request.setAttribute("componentStates", getComponentStates(request));
        }
    }



    private Set<ItemState> getComponentStates(HstRequest request) {
        Set<ItemState> componentStates = new LinkedHashSet<ItemState>();
        Set<String> disabledComponents = getUserProfile(request).getDisabledComponents();
        Collection<HstComponentConfiguration> homepageComponents = getHomepageComponents(request);
        for (HstComponentConfiguration component : homepageComponents) {
            boolean enabled = !disabledComponents.contains(component.getName());
            if (isClosable(component) && isVisibleToUser(request, component)) {
                componentStates.add(new ItemState(component.getName(), component.getLocalParameter("title"), enabled));
            }
        }
        return componentStates;
    }

    private boolean isVisibleToUser(HstRequest request, HstComponentConfiguration component) {
         Boolean visibleForStudents = !"off".equals(component.getParameter("visibleForStudents"));
         Boolean visibleForEmployees = !"off".equals(component.getParameter("visibleForEmployees"));
        return (isStudent(request) && visibleForStudents) ||
                (isTeacher(request) && visibleForEmployees);
    }

    private boolean isClosable(HstComponentConfiguration component) {
        String parameter = component.getParameter("notClosable");
        return !"on".equals(parameter);
    }

    private Collection<HstComponentConfiguration> getHomepageComponents(HstRequest request) {
        HstComponentConfiguration homeMainContent = getHstSite(request).getComponentsConfiguration().getComponentConfiguration("hst:pages/home/main/content");
        if (homeMainContent != null) {
            LOG.debug("COMPONENTCONFIGURATIONS of homepage has been found");
            return homeMainContent.getChildren().values();
        }
        return Collections.emptySet();
    }

    private Set<ItemState> getAreaOfInterestStates(LinkedHashMap<String, String> areasOfInterest, Set<String> disabledAreasOfInterest) {
        Set<ItemState> result = new LinkedHashSet<ItemState>();

        for (Entry<String, String> entry : areasOfInterest.entrySet()) {
            boolean enabled = !disabledAreasOfInterest.contains(entry.getKey());
            result.add(new ItemState(entry.getKey(), entry.getValue(), enabled));
        }

        return result;
    }

    @Override
    public void doAction(HstRequest request, HstResponse response) throws HstComponentException {
        super.doAction(request, response);
        SecurityUtil securityUtil = getClientComponent(SecurityUtil.class);

        if (securityUtil.hasUserDetails(request)) {
            UserProfile userProfile = securityUtil.getUserProfile(request);

            // Create the field list and the form map
            FormMap componentStateMap = new FormMap(request, getComponentIds(request));

            // Process component states
            userProfile.getDisabledComponents().clear();
            for (String componentId : componentStateMap.getFieldNames()) {
                FormField formField = componentStateMap.getField(componentId);
                boolean enabled = !"".equals(formField.getValue());
                if (!enabled) {
                    userProfile.getDisabledComponents().add(componentId);
                }
            }

            // process areas of interest
            FormMap areaOfInterestMap = new FormMap(request, getAreasOfInterest(request).keySet().toArray(new String[0]));
            userProfile.getDisabledAreasOfInterest().clear();
            for (String aoiId : areaOfInterestMap.getFieldNames()) {
                FormField formField = areaOfInterestMap.getField(aoiId);
                boolean enabled = !"".equals(formField.getValue());
                if (!enabled) {
                    userProfile.getDisabledAreasOfInterest().add(aoiId);
                }
            }
            LOG.debug("Updating user profile");
            // Store the profile
            securityUtil.setUserProfile(request, userProfile);
        }
    }

    private List<String> getComponentIds(HstRequest request) {
        ArrayList<String> arrayList = new ArrayList<String>();
        Collection<HstComponentConfiguration> homepageComponents = getHomepageComponents(request);
        for (HstComponentConfiguration component : homepageComponents) {
            arrayList.add(component.getName());
        }
        return arrayList;
    }
}
