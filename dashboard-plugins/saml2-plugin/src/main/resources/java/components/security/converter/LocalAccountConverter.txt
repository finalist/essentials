package {{componentsPackage}}.security.converter;

import {{componentsPackage}}.exception.EsbException;
import {{componentsPackage}}.exception.NotFoundException;
import {{componentsPackage}}.model.UserInfo;
import {{componentsPackage}}.security.exception.InvalidUserIdException;
import {{componentsPackage}}.security.exception.NoAuthoritiesException;
import {{componentsPackage}}.security.model.LocalAccount;
import {{componentsPackage}}.security.model.UserProfile;
import {{componentsPackage}}.security.model.userdetails.UserDetails;
import {{componentsPackage}}.security.service.LocalAccountService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class LocalAccountConverter extends AbstractAccountConverter implements Converter<String, UserDetails> {
    private static final Logger LOG = LoggerFactory.getLogger(LocalAccountConverter.class);

    private static final String LOGOUT_PATH = "/account/logout";

    @Autowired
    private LocalAccountService localAccountService;

    @Override
    public UserDetails convert(String username) {
        LocalAccount localAccount = localAccountService.getAccount(username);

        try {
            // Get granted authorities and user id from the local account
            String uid = getUserId(localAccount.getUids());
            List<GrantedAuthority> authorities = getGrantedAuthorities(localAccount.getAffiliations());

            // Get the user profile, based on the uid and authorities
            UserProfile userProfile = getProfile(uid, authorities);

            // Get the user info, based on the uid and authorities
            UserInfo userInfo = getUserInfo(uid, authorities);

            // Return user details
            return new UserDetails(
                    uid,
                    authorities,
                    userProfile,
                    userInfo,
                    localAccount.getUsername(),
                    localAccount.getPassword(),
                    LOGOUT_PATH
            );
        } catch (NoAuthoritiesException e) {
            LOG.error(e.getMessage());
        } catch (InvalidUserIdException e) {
            LOG.error(e.getMessage());
        } catch (NotFoundException e) {
            LOG.error("ESB returned NotFound while retrieving UserInfo: " + e.getMessage());
        } catch (EsbException e) {
            LOG.error("ESB returned Server Error while retrieving UserInfo: " + e.getMessage());
        }
        return null;
    }
}
