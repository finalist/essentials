package {{componentsPackage}}.security.util;

import {{componentsPackage}}.model.UserInfo;
import {{componentsPackage}}.security.exception.NoUserDetailsException;
import {{componentsPackage}}.security.exception.NoUserInfoException;
import {{componentsPackage}}.security.exception.NoUserProfileException;
import {{componentsPackage}}.security.model.UserProfile;
import {{componentsPackage}}.security.model.userdetails.UserDetails;
import {{componentsPackage}}.security.model.userdetails.UserRole;
import {{componentsPackage}}.security.service.UserProfileService;
import {{componentsPackage}}.services.EmployeeInfoServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * This class is needed for the profile plugin to work
 * without a login configured.
 * This makes it possible to quickly demo what can be done,
 * please add a login and remove this class.
 */
public class FakeSecurityUtil extends SecurityUtil{
    private static final Logger LOG = LoggerFactory.getLogger(FakeSecurityUtil.class);

    @Autowired
    private UserProfileService userProfileService;

    @Override
    public boolean hasUserDetails(HttpServletRequest request) {
        return true;
    }

    @Override
    public UserDetails getUserDetails(HttpServletRequest request) throws NoUserDetailsException {
        try{
            UserProfile profile = userProfileService.getProfile("test");
            EmployeeInfoServiceImpl infoService = new EmployeeInfoServiceImpl();
            UserInfo userinfo = infoService.getEmployeeInfo("fakecode");
            List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
            GrantedAuthority testAuthority = new GrantedAuthority() {
                @Override
                public String getAuthority() {
                    return "test";
                }
            };
            grantedAuthorities.add(testAuthority);
            return new UserDetails("testuuid",grantedAuthorities,profile,userinfo,"id","passWord","logoutpath");
        }catch (Exception e){
            LOG.warn("fake implemantation has caused some error");
            return null;
        }
    }

    @Override
    public void setUserProfile(HttpServletRequest request, UserProfile userProfile) {
        LOG.trace("Storing user profile in the data store for session persistence");
        userProfileService.updateProfile(userProfile);
    }

    @Override
    public UserProfile getUserProfile(HttpServletRequest request) throws NoUserProfileException {
        return userProfileService.getProfile("test");
    }

    @Override
    public UserInfo getUserInfo(HttpServletRequest request) throws NoUserInfoException {
        try{
            EmployeeInfoServiceImpl infoService = new EmployeeInfoServiceImpl();
            return infoService.getEmployeeInfo("fakecode");
        }catch (Exception e){
            LOG.warn("fake implemantation has caused some error");
            return null;
        }

    }

    @Override
    public boolean hasRole(UserDetails userDetails, UserRole role) {
        return true;
    }

    @Override
    public boolean hasRole(Collection<GrantedAuthority> authorities, UserRole role) {
        return true;
    }
}
