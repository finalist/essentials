package {{componentsPackage}}.security.util;

import {{componentsPackage}}.model.UserInfo;
import {{componentsPackage}}.security.exception.NoUserDetailsException;
import {{componentsPackage}}.security.exception.NoUserInfoException;
import {{componentsPackage}}.security.exception.NoUserProfileException;
import {{componentsPackage}}.security.model.UserProfile;
import {{componentsPackage}}.security.model.userdetails.UserDetails;
import {{componentsPackage}}.security.model.userdetails.UserRole;
import {{componentsPackage}}.security.service.UserProfileService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;
import java.security.Principal;
import java.util.Collection;

@Component
public class SecurityUtil {
    private static final Logger LOG = LoggerFactory.getLogger(SecurityUtil.class);

    @Autowired
    private UserProfileService userProfileService;

    public boolean hasUserDetails(HttpServletRequest request) {
        Principal principal = request.getUserPrincipal();

        return (principal != null);
    }

    public UserDetails getUserDetails(HttpServletRequest request) throws NoUserDetailsException {
        if (hasUserDetails(request)) {
            LOG.trace("Loading user details from the request");
            Principal principal = request.getUserPrincipal();
            return (UserDetails) ((Authentication) principal).getPrincipal();
        }
        else {
            throw new NoUserDetailsException("No user details found on the request");
        }
    }

    public UserProfile getUserProfile(HttpServletRequest request) throws NoUserProfileException {
        LOG.trace("Loading user profile from the user details on the request");
        if(hasUserDetails(request)) {
            UserDetails userDetails = getUserDetails(request);
            UserProfile userProfile = userDetails.getUserProfile();

            if(userProfile != null) {
                return userProfile;
            }
            else {
                throw new NoUserProfileException("No user profile found on the request");
            }
        }
        else {
            throw new NoUserDetailsException("No user details found on the request");
        }
    }

    public UserInfo getUserInfo(HttpServletRequest request) throws NoUserInfoException {
        LOG.trace("Loading user info from the user details on the request");
        if(hasUserDetails(request)) {
            UserDetails userDetails = getUserDetails(request);
            UserInfo userInfo = userDetails.getUserInfo();

            if(userInfo != null) {
                return userInfo;
            }
            else {
                throw new NoUserInfoException("No user info found on the request");
            }
        }
        else {
            throw new NoUserDetailsException("No user details found on the request");
        }
    }

    public void setUserProfile(HttpServletRequest request, UserProfile userProfile) {
        LOG.trace("Storing user profile in the user details on the request");
        UserDetails userDetails = getUserDetails(request);
        userDetails.setUserProfile(userProfile);

        LOG.trace("Storing user profile in the data store for session persistence");
        userProfileService.updateProfile(userProfile);
    }

    public boolean hasRole(UserDetails userDetails, UserRole role) {
        return hasRole(userDetails.getAuthorities(), role);
    }

    public boolean hasRole(Collection<GrantedAuthority> authorities, UserRole role) {
        for(GrantedAuthority grantedAuthority : authorities) {
            String authority = grantedAuthority.getAuthority();

            if(authority.equalsIgnoreCase(role.getAuthority())) {
                return true;
            }
        }

        return false;
    }
}

